openapi: 3.0.1
info:
  title: Reservations Service API
  description: Reservations from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  /customer_reservations/{user_id}:
    get:
      tags:
      - Customer reservations
      summary: Get the future reservations of the user specified by the given user_id
      operationId: reservation_microservice.customer_reservations.get_reservations
      parameters:
      - name: user_id
        in: path
        description: User's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return the future reservations of the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'
        404:
          description: No reservations associated with the given user_id
          content: {}
  /filtered_reservations/{user_id}:
    get:
      tags:
      - Customer reservations
      summary: Get the reservation performed by the user specified by user_id with filters provided as query args.
      operationId: reservation_microservice.customer_reservations.get_reservations_by_restaurant
      parameters:
      - name: user_id
        in: path
        description: User's unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      - name: restaurant_id
        in: query
        description: If specified, filters results by provided Restaurant's unique identifier too
        required: false
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      - name: exclude_user_id
        in: query
        description: Whether to filter reservations by user_id different from the given one. Defaults to false.
        required: false
        schema:
          type: boolean
          default: False
      - name: start_time
        in: query
        description: The start time of the entrance_time for the wanted reservations. Can be used both in combination with end_time or alone.
        required: false
        schema:
          type: string
          format: date-time
      - name: end_time
        in: query
        description: The end time of the entrance_time for the wanted reservations. Must be used with start_time.
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Returns the reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'
        400:
          description: Bad request, parameters error.
          content: {}
        
  /customer_reservation/{reservation_id}:
    delete:
      tags:
      - Customer reservations
      summary: Delete the reservation specified by the given reservation_id
      operationId: reservation_microservice.customer_reservations.delete_user_reservation
      parameters:
      - name: reservation_id
        in: path
        description: Reservation's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Reservation deleted correctly
          content: {}

        401:
          description: You must be authorized to perform this operation
          content: {}
              
        404:
          description: The specified reservation does not exist
          content: {}
    put:
      tags:
      - Customer reservations
      summary: Update the reservation specified by the given reservation_id
      operationId: reservation_microservice.customer_reservations.update_user_reservation
      parameters:
      - name: reservation_id
        in: path
        description: Reservation's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_reservation_time:
                  type: string
                  format: date-time
                  description: the new date and time of the reservation
                new_seats:
                  type: integer
                  description: the new number of reserved seats
      responses:
        200:
          description: OK
          content: {}
        401: 
          description: You must be authorized to perform this operation
          content: {}
        404: 
          description: The specified reservation does not exist
          content: {}
        500:
          description: service error
          content: {}
  /reservations/{restaurant_id}:
    get:
      tags:
      - Operator reservations
      summary: get the reservations associated to the restaurant specified by restaurant_id
      operationId: reservation_microservice.restaurant_reservations.get_restaurant_reservations
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      - name: range
        in: query
        required: False
        schema:
          type: string
          enum:
            - today
            - upcoming
          description: a relative time range filtering the reservations based on their time. More to be added
          example: today
      - name: seated
        in: query
        required: False
        schema:
          type: boolean
          default: False
          description: used to filter the reservations by the SEATED status, in order to get the number of currently seated customer. Should be used alone.
      - name: page
        in: query
        required: False
        schema:
          type: integer
          description: an integer indicating the current page
          default: 1
          example: 2
      - name: page_size
        in: query
        required: False
        schema:
          type: integer
          enum:
          - 6
          default: 6
        description: an integer indicating the number of reservations to be fetched, can only be used with the page parameter. 
                     Currently, the only accepted value is 6.
      responses:
        200:
          description: Return the reservations of the restaurant.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'
        404:
          description: The restaurant specified by restaurant_id has no associated reservations
          content: {}
        500:
          description: service error
          content: {}
    delete:
      tags:
      - Operator reservations
      summary: Delete all the future reservations associated to the restaurant specified by restaurant_id
      operationId: reservation_microservice.restaurant_reservations.delete_restaurant_reservations
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's unique identifier
        required: true
        schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        204:
          description: Reservations deleted correctly
        404:
          description: The restaurant specified by restaurant_id has no associated reservations
          content: {}
        500:
          description: service error
          content: {}
  /reservation/{reservation_id}/status:
    put:
      tags:
      - Operator reservations
      summary: Update the status of the reservation specified by reservation_id.
      operationId: reservation_microservice.restaurant_reservations.update_reservation_status
      parameters:
      - name: reservation_id
        in: path
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: integer
                  description: An integer representing the status of the reservation. (0 = Declined, 1 = Pending, 2 = Accepted, 3 = Seated, 4 = Done)
                  minimum: 0
                  maximum: 4
                time:
                  type: string
                  format: date-time
                  description: A datetime in ISO format that describes the entrance/exit of the user. 
                               A real date should only be used with the values '3' and '4' of the status parameter,
                               an empty string should be sent with the others.
                  example: '2020-11-22T22:00:00'
      responses:
        200:
          description: Reservation updated correctly
          content: {}
        404:
          description: Reservation not found
          content: {}
        500:
          description: Service error
          content: {}

  /reserve:
    post:
      tags:
      - Customer reservations
      summary: Adds a new reservation
      operationId: reservation_microservice.customer_reservations.reserve
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: unique identifier of the user performing the reservation
                restaurant_id:
                  type: integer
                  description: unique identifier of the reserved restaurant
                reservation_time: 
                  type: string
                  format: date-time
                  description: date and time of the reservation
                seats:
                  type: integer
                  description: the number of reserved seats
      responses:
        200:
          description: Reservation added correctly
          content: {}
        401:
          description: You must be authorized to perform this operation
          content: {}
        500:
          description: Error in service
          content: {}
  /contact_tracing/{positive_user_id}:
    get:
      tags:
      - Contact Tracing
      summary: Implements contact tracing feature. Given a user id, returns a list of users which
              were allegedly in contact with the specified user within the last `contact_days` days (defaults to 14). 
      operationId: reservation_microservice.classes.contact_tracing.contact_tracing
      parameters:
      - name: positive_user_id
        in: path
        description: User's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      - name: contact_days
        in: query
        description: How many days in the past should we check for possible contacts. Defaults to 14.
        required: false
        schema:
          type: integer
          default: 14
      responses:
        200:
          description: Returns a list of users in contact with the positive user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
components:
  schemas:
    Reservation:
      required:
      - id
      - user_id
      - restaurant_id
      - reservation_time
      - status
      - table_no
      - seats
      - entrance_time
      - exit_time
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the reservation
          readOnly: true
          example: 123
        user_id:
          type: integer
          description: Unique identifier of the user performing the reservation
          example: 12
        restaurant_id:
          type: integer
          description: Unique identifier of the restaurant to be reserved
          example: 67
        reservation_time:
          type: string
          format: date-time
          description: Date and time of the reservation
        status:
          type: string
          description: The reservation status
          enum:
            - Declined
            - Pending
            - Accepted
            - Seated
            - Done
          example: Accepted
        table_no:
          type: integer
          description: Unique identifier of the reserved table
          example: 124
        seats:
          type: integer
          description: The number of seats of the reservation 
          example: 6
        entrance_time:
          type: string
          format: date-time
          description: The entrance time of the customer for the reservation
          nullable: true
          example:
        exit_time:
          type: string
          format: date-time
          description: The exit time of the customer for the reservation
          nullable: true
    User:
      description: User datatype
      type: object
      properties:
        id:
          description: User ID
          type: integer
        email:
          description: User e-mail
          type: string
          format: email
          pattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
          maxLength: 128
        firstname:
          description: User first name
          type: string          
          maxLength: 128
          nullable: true
        lastname:
          description: User last name
          type: string          
          maxLength: 128
          nullable: true
        fiscal_code:
          description: User fiscal code
          type: string
          maxLength: 50
          nullable: true
        phone:
          description: User phone number
          type: string
          maxLength: 20
          nullable: true
        password:
          description: User password (hashed)
          type: string
          nullable: true
        dateofbirth:
          description: User birthday
          type: string
          format: date-time
          nullable: true
        confirmed_positive_date:
          description: User COVID positivity date
          type: string
          format: date-time
          nullable: true
        is_active:
          description: \?
          type: boolean
          nullable: true
        is_admin:
          description: Is user an health authority?
          type: boolean
          nullable: true
        is_positive:
          description: Is user covid positive
          type: boolean
          nullable: true
        reported_positive_date:
          description: User reported COVID positivity date
          type: string
          format: date-time
          nullable: true
        restaurant_id:
          description: User restaurant id (if operator)
          type: integer
          nullable: true

